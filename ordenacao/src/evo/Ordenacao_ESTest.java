/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 22 23:25:36 GMT 2023
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.file.InvalidPathException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Ordenacao_ESTest extends Ordenacao_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Ordenacao ordenacao0 = new Ordenacao();
      String string0 = "\r\n";
      // Undeclared exception!
      try { 
        ordenacao0.gerarArquivo("\r\n");
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Ordenacao ordenacao0 = new Ordenacao();
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(0);
      ordenacao0.setValores(integerArray0);
      Integer.compare(0, 0);
      Integer.remainderUnsigned((-615), (-615));
      Integer.getInteger((String) null);
      Integer integer1 = new Integer(0);
      Integer.getInteger((String) null, integer1);
      integerArray0[0] = integer0;
      Integer.getInteger((String) null);
      Integer.sum(0, 0);
      ordenacao0.setValores(integerArray0);
      ordenacao0.setValores(integerArray0);
      ordenacao0.insertionSort();
      ordenacao0.insertionSort();
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      // Undeclared exception!
      Ordenacao.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Ordenacao ordenacao0 = new Ordenacao();
      OrdenacaoListener ordenacaoListener0 = mock(OrdenacaoListener.class, new ViolatedAssumptionAnswer());
      ordenacao0.setListener(ordenacaoListener0);
      ordenacao0.logOperacoes();
      // Undeclared exception!
      try { 
        ordenacao0.bubbleSort();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Ordenacao", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Ordenacao ordenacao0 = new Ordenacao();
      int int0 = 0;
      ordenacao0.gerarValoresVetor(0);
      ordenacao0.selectionSort();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "\r\n";
      stringArray0[1] = "./";
      stringArray0[2] = "&P|)`h;m/7k7_r";
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      ordenacao0.setValores(integerArray0);
      // Undeclared exception!
      Ordenacao.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Ordenacao ordenacao0 = new Ordenacao();
      ordenacao0.isLogOperacoes();
      String string0 = "Diretorio";
      Integer[] integerArray0 = null;
      Integer[] integerArray1 = new Integer[3];
      Integer integer0 = new Integer(0);
      integerArray1[0] = integer0;
      int int0 = 537;
      try { 
        Integer.parseUnsignedInt("Diretorio");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Diretorio\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "7C=>s>0SJ";
      // Undeclared exception!
      Ordenacao.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Ordenacao ordenacao0 = new Ordenacao();
      Integer[] integerArray0 = new Integer[8];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1861));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1));
      Integer integer4 = Integer.getInteger("", integer3);
      integerArray0[3] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[4] = integer5;
      Integer integer6 = new Integer((-1677));
      integerArray0[5] = integer6;
      Integer integer7 = new Integer(int0);
      integerArray0[6] = integer7;
      Integer integer8 = Integer.getInteger("", (-1));
      integerArray0[7] = integer8;
      ordenacao0.setValores(integerArray0);
      ordenacao0.isLogOperacoes();
      ordenacao0.selectionSort();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Ordenacao ordenacao0 = new Ordenacao();
      ordenacao0.logOperacoes();
      // Undeclared exception!
      try { 
        ordenacao0.bubbleSort();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Ordenacao", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Ordenacao ordenacao0 = new Ordenacao();
      // Undeclared exception!
      try { 
        ordenacao0.selectionSort();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Ordenacao", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = "";
      stringArray0[0] = "";
      // Undeclared exception!
      Ordenacao.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Ordenacao ordenacao0 = new Ordenacao();
      ordenacao0.logOperacoes();
      // Undeclared exception!
      try { 
        ordenacao0.bubbleSort();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Ordenacao", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Ordenacao ordenacao0 = new Ordenacao();
      // Undeclared exception!
      try { 
        ordenacao0.insertionSort();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Ordenacao", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Ordenacao ordenacao0 = new Ordenacao();
      String string0 = "@Hd!t^k+:Q?6%x%iv";
      // Undeclared exception!
      try { 
        ordenacao0.gerarArquivo("@Hd!t^k+:Q?6%x%iv");
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Ordenacao ordenacao0 = new Ordenacao();
          // Undeclared exception!
          try { 
            ordenacao0.gerarArquivo("9#'N($W$;NP,}ig2Z");
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \".\\9#'N($W$;NP,}ig2ZDiretorio00000000-0100-4000-8200-000003000000\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.WindowsPath.checkWrite(WindowsPath.java:799)
             // sun.nio.fs.WindowsFileSystemProvider.createDirectory(WindowsFileSystemProvider.java:491)
             // java.nio.file.Files.createDirectory(Files.java:674)
             // Ordenacao.gerarArquivo(Ordenacao.java:126)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Ordenacao ordenacao0 = new Ordenacao();
      ordenacao0.gerarValoresVetor(1002);
      String[] stringArray0 = new String[3];
      ordenacao0.setLogOperacoes(true);
      stringArray0[0] = "[!rddoR";
      stringArray0[1] = "b";
      String string0 = ".txt";
      // Undeclared exception!
      ordenacao0.bubbleSort();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Ordenacao ordenacao0 = new Ordenacao();
          OrdenacaoListener ordenacaoListener0 = mock(OrdenacaoListener.class, new ViolatedAssumptionAnswer());
          ordenacao0.setListener(ordenacaoListener0);
          Integer[] integerArray0 = new Integer[2];
          Integer integer0 = new Integer((-955));
          integerArray0[0] = integer0;
          Integer.compare((int) integerArray0[0], 658);
          Integer integer1 = new Integer(0);
          integerArray0[1] = integer1;
          ordenacao0.setValores(integerArray0);
          OrdenacaoListener ordenacaoListener1 = mock(OrdenacaoListener.class, new ViolatedAssumptionAnswer());
          ordenacao0.setListener(ordenacaoListener1);
          ordenacao0.bubbleSort();
          String string0 = " ";
          // Undeclared exception!
          try { 
            ordenacao0.gerarArquivo(" ");
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \".\\ Diretorio00000000-0100-4000-8200-000003000000\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.WindowsPath.checkWrite(WindowsPath.java:799)
             // sun.nio.fs.WindowsFileSystemProvider.createDirectory(WindowsFileSystemProvider.java:491)
             // java.nio.file.Files.createDirectory(Files.java:674)
             // Ordenacao.gerarArquivo(Ordenacao.java:126)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Ordenacao ordenacao0 = new Ordenacao();
      ordenacao0.setLogOperacoes(true);
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-8));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-8));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1917));
      integerArray0[2] = integer2;
      int int0 = 1;
      Integer integer3 = Integer.getInteger("!b2?w\"", 1);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(1);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(1000);
      integerArray0[7] = integer7;
      ordenacao0.setValores(integerArray0);
      ordenacao0.setListener((OrdenacaoListener) null);
      ordenacao0.selectionSort();
      // Undeclared exception!
      ordenacao0.gerarValoresVetor(10000);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Ordenacao ordenacao0 = new Ordenacao();
      // Undeclared exception!
      try { 
        ordenacao0.selectionSort();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Ordenacao", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Ordenacao ordenacao0 = new Ordenacao();
      Integer[] integerArray0 = new Integer[0];
      OrdenacaoListener ordenacaoListener0 = mock(OrdenacaoListener.class, new ViolatedAssumptionAnswer());
      ordenacao0.setListener(ordenacaoListener0);
      ordenacao0.setValores(integerArray0);
      ordenacao0.selectionSort();
      ordenacao0.logOperacoes();
      int int0 = (-984);
      // Undeclared exception!
      try { 
        ordenacao0.gerarValoresVetor((-984));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Ordenacao", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Ordenacao ordenacao0 = new Ordenacao();
      ordenacao0.setLogOperacoes(true);
      // Undeclared exception!
      try { 
        ordenacao0.logOperacoes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Ordenacao", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Ordenacao ordenacao0 = new Ordenacao();
      // Undeclared exception!
      try { 
        ordenacao0.gerarValoresVetor(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Ordenacao ordenacao0 = new Ordenacao();
          ordenacao0.setValores((Integer[]) null);
          ordenacao0.setLogOperacoes(true);
          ordenacao0.gerarValoresVetor(1983);
          ordenacao0.setLogOperacoes(false);
          ordenacao0.insertionSort();
          ordenacao0.setLogOperacoes(false);
          ordenacao0.isLogOperacoes();
          String string0 = ".txt";
          // Undeclared exception!
          try { 
            ordenacao0.gerarArquivo(".txt");
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \".\\.txtDiretorio00000000-0100-4000-8200-000003000000\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.WindowsPath.checkWrite(WindowsPath.java:799)
             // sun.nio.fs.WindowsFileSystemProvider.createDirectory(WindowsFileSystemProvider.java:491)
             // java.nio.file.Files.createDirectory(Files.java:674)
             // Ordenacao.gerarArquivo(Ordenacao.java:126)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Ordenacao ordenacao0 = new Ordenacao();
      ordenacao0.gerarValoresVetor(0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "(qmK#Hn\u0004";
      stringArray0[1] = "";
      stringArray0[2] = "";
      ordenacao0.setLogOperacoes(true);
      ordenacao0.insertionSort();
      ordenacao0.logOperacoes();
      ordenacao0.bubbleSort();
      stringArray0[3] = "";
      // Undeclared exception!
      Ordenacao.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Ordenacao ordenacao0 = new Ordenacao();
      ordenacao0.getValores();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Ordenacao ordenacao0 = new Ordenacao();
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-2936));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2936));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer.getInteger("C-Us5CGX4N:w-\"aCO");
      Integer.compareUnsigned((int) integerArray0[1], (int) integerArray0[1]);
      integerArray0[3] = null;
      Integer integer3 = new Integer(0);
      integerArray0[4] = integer3;
      Integer.toUnsignedLong((int) integerArray0[0]);
      Integer integer4 = new Integer((-2936));
      integerArray0[5] = integer4;
      ordenacao0.setValores(integerArray0);
      ordenacao0.getValores();
      ordenacao0.setLogOperacoes(true);
      ordenacao0.getValores();
      ordenacao0.setLogOperacoes(true);
      // Undeclared exception!
      try { 
        ordenacao0.selectionSort();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Ordenacao", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Ordenacao ordenacao0 = new Ordenacao();
      Integer[] integerArray0 = new Integer[6];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer.min(0, 0);
      Integer integer1 = new Integer((-4253));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1619);
      integerArray0[3] = integer3;
      Integer.getInteger("`$CJz$f,`2Kz1qQASm");
      integerArray0[4] = null;
      Integer integer4 = new Integer(int0);
      integerArray0[5] = integer4;
      ordenacao0.setValores(integerArray0);
      // Undeclared exception!
      try { 
        ordenacao0.bubbleSort();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Ordenacao", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Ordenacao ordenacao0 = new Ordenacao();
      String[] stringArray0 = new String[2];
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(977);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      Integer integer2 = Integer.getInteger("Gravando em um arquivo - ", integer1);
      integerArray0[1] = integer2;
      Integer integer3 = new Integer((-1101));
      integerArray0[2] = integer3;
      Integer integer4 = new Integer((int) integerArray0[0]);
      integerArray0[3] = integer4;
      Integer integer5 = new Integer((-2237));
      integerArray0[4] = integer5;
      Integer integer6 = new Integer((int) integerArray0[0]);
      integerArray0[5] = integer6;
      Integer integer7 = new Integer(0);
      integerArray0[6] = integer7;
      Integer integer8 = new Integer((-2876));
      integerArray0[7] = integer8;
      ordenacao0.setValores(integerArray0);
      stringArray0[0] = "ir04";
      ordenacao0.logOperacoes();
      ordenacao0.logOperacoes();
      ordenacao0.bubbleSort();
      stringArray0[1] = "(kk$n:sYenMKE);I";
      // Undeclared exception!
      Ordenacao.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Ordenacao ordenacao0 = new Ordenacao();
      ordenacao0.logOperacoes();
      OrdenacaoListener ordenacaoListener0 = mock(OrdenacaoListener.class, new ViolatedAssumptionAnswer());
      ordenacao0.setListener(ordenacaoListener0);
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-1021));
      integerArray0[0] = integer0;
      Integer.toUnsignedLong((int) integerArray0[0]);
      Integer integer1 = Integer.valueOf(61);
      Integer.toUnsignedLong((-1021));
      ordenacao0.logOperacoes();
      Integer.compareUnsigned((-1021), (int) integerArray0[0]);
      Integer.getInteger("#;fNgtC?Dm", (-2496));
      integerArray0[1] = integer1;
      ordenacao0.setValores(integerArray0);
      ordenacao0.selectionSort();
      ordenacao0.bubbleSort();
      ordenacao0.insertionSort();
      OrdenacaoListener ordenacaoListener1 = mock(OrdenacaoListener.class, new ViolatedAssumptionAnswer());
      ordenacao0.setListener(ordenacaoListener1);
      // Undeclared exception!
      try { 
        ordenacao0.gerarValoresVetor((-2496));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Ordenacao", e);
      }
  }
}
