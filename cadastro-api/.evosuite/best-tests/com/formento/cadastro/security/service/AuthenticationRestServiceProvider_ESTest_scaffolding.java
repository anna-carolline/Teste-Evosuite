/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Sun Sep 03 21:15:20 GMT 2023
 */

package com.formento.cadastro.security.service;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class AuthenticationRestServiceProvider_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "com.formento.cadastro.security.service.AuthenticationRestServiceProvider"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "Cp1252"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "C:\\Users\\anaba\\AppData\\Local\\Temp\\"); 
    java.lang.System.setProperty("user.country", "BR"); 
    java.lang.System.setProperty("user.dir", "C:\\Users\\anaba\\Downloads\\cadastro-api"); 
    java.lang.System.setProperty("user.home", "C:\\Users\\anaba"); 
    java.lang.System.setProperty("user.language", "pt"); 
    java.lang.System.setProperty("user.name", "anaba"); 
    java.lang.System.setProperty("user.timezone", "America/Sao_Paulo"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AuthenticationRestServiceProvider_ESTest_scaffolding.class.getClassLoader() ,
      "org.springframework.security.authentication.BadCredentialsException",
      "org.springframework.beans.factory.annotation.Autowired",
      "com.formento.cadastro.service.component.CodificadorComponent",
      "io.jsonwebtoken.Claims",
      "org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy",
      "org.springframework.security.core.CredentialsContainer",
      "org.springframework.stereotype.Service",
      "org.springframework.security.core.userdetails.UserDetails",
      "com.formento.cadastro.model.Telefone",
      "org.springframework.security.core.AuthenticationException",
      "org.springframework.security.core.context.SecurityContextHolder",
      "com.formento.cadastro.exception.AccessDeniedCadastroExceptionDefault",
      "org.springframework.security.core.context.SecurityContextHolderStrategy",
      "com.formento.cadastro.exception.CadastroException",
      "org.springframework.security.authentication.AuthenticationManager",
      "org.springframework.security.core.context.SecurityContextImpl",
      "com.formento.cadastro.security.service.AuthenticationRestServiceProvider",
      "com.formento.cadastro.security.component.JwtTokenUtil",
      "com.formento.cadastro.service.UsuarioService",
      "io.jsonwebtoken.ClaimsMutator",
      "org.springframework.stereotype.Component",
      "org.springframework.security.core.context.SecurityContext",
      "com.formento.cadastro.security.service.AuthenticationRestService",
      "org.springframework.security.authentication.AbstractAuthenticationToken",
      "io.jsonwebtoken.ExpiredJwtException",
      "io.jsonwebtoken.JwtException",
      "com.formento.cadastro.exception.CadastroExceptionDefault",
      "com.formento.cadastro.security.UsuarioAuthentication",
      "org.springframework.security.authentication.UsernamePasswordAuthenticationToken",
      "org.springframework.security.core.Authentication",
      "com.formento.cadastro.model.Usuario",
      "org.springframework.security.core.authority.AuthorityUtils",
      "com.formento.cadastro.exception.UnauthorizedCadastroExceptionDefault"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("com.formento.cadastro.model.Usuario", false, AuthenticationRestServiceProvider_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("com.formento.cadastro.security.UsuarioAuthentication", false, AuthenticationRestServiceProvider_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("com.formento.cadastro.security.component.JwtTokenUtil", false, AuthenticationRestServiceProvider_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("com.formento.cadastro.service.UsuarioService", false, AuthenticationRestServiceProvider_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("com.formento.cadastro.service.component.CodificadorComponent", false, AuthenticationRestServiceProvider_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("org.springframework.security.authentication.AuthenticationManager", false, AuthenticationRestServiceProvider_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AuthenticationRestServiceProvider_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "com.formento.cadastro.security.service.AuthenticationRestServiceProvider",
      "org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy",
      "org.springframework.security.core.context.SecurityContextHolder",
      "com.formento.cadastro.security.component.JwtTokenUtil",
      "org.springframework.security.authentication.AbstractAuthenticationToken",
      "org.springframework.security.authentication.UsernamePasswordAuthenticationToken",
      "org.springframework.util.ConcurrentReferenceHashMap$ReferenceType",
      "org.springframework.util.ConcurrentReferenceHashMap",
      "org.springframework.util.Assert",
      "org.springframework.util.ConcurrentReferenceHashMap$Segment",
      "org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager",
      "org.springframework.util.ReflectionUtils$4",
      "org.springframework.util.ReflectionUtils$5",
      "org.springframework.util.ReflectionUtils$6",
      "org.springframework.util.ReflectionUtils",
      "com.formento.cadastro.security.JwtUser",
      "org.springframework.security.core.AuthenticationException",
      "org.springframework.security.authentication.BadCredentialsException",
      "com.formento.cadastro.model.Usuario",
      "org.springframework.security.core.authority.AuthorityUtils",
      "org.springframework.security.core.context.SecurityContextImpl",
      "com.formento.cadastro.exception.CadastroExceptionDefault",
      "org.springframework.util.ConcurrentReferenceHashMap$Task",
      "org.springframework.util.ConcurrentReferenceHashMap$5",
      "org.springframework.util.ConcurrentReferenceHashMap$Entries",
      "com.formento.cadastro.exception.UnauthorizedCadastroExceptionDefault",
      "com.formento.cadastro.exception.AccessDeniedCadastroExceptionDefault",
      "com.formento.cadastro.security.JwtAuthenticationRequest",
      "com.formento.cadastro.model.Telefone",
      "org.springframework.util.ConcurrentReferenceHashMap$4"
    );
  }
}
