/*
 * This file was automatically generated by EvoSuite
 * Sun Sep 03 21:15:20 GMT 2023
 */

package com.formento.cadastro.security.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.formento.cadastro.model.Usuario;
import com.formento.cadastro.security.UsuarioAuthentication;
import com.formento.cadastro.security.component.JwtTokenUtil;
import com.formento.cadastro.security.service.AuthenticationRestServiceProvider;
import com.formento.cadastro.service.UsuarioService;
import com.formento.cadastro.service.component.CodificadorComponent;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.core.Authentication;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AuthenticationRestServiceProvider_ESTest extends AuthenticationRestServiceProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AuthenticationRestServiceProvider authenticationRestServiceProvider0 = new AuthenticationRestServiceProvider();
      AuthenticationManager authenticationManager0 = mock(AuthenticationManager.class, new ViolatedAssumptionAnswer());
      doReturn((Authentication) null).when(authenticationManager0).authenticate(any(org.springframework.security.core.Authentication.class));
      Injector.inject(authenticationRestServiceProvider0, (Class<?>) AuthenticationRestServiceProvider.class, "authenticationManager", (Object) authenticationManager0);
      CodificadorComponent codificadorComponent0 = mock(CodificadorComponent.class, new ViolatedAssumptionAnswer());
      Injector.inject(authenticationRestServiceProvider0, (Class<?>) AuthenticationRestServiceProvider.class, "codificadorComponent", (Object) codificadorComponent0);
      JwtTokenUtil jwtTokenUtil0 = mock(JwtTokenUtil.class, new ViolatedAssumptionAnswer());
      Injector.inject(authenticationRestServiceProvider0, (Class<?>) AuthenticationRestServiceProvider.class, "jwtTokenUtil", (Object) jwtTokenUtil0);
      Usuario usuario0 = mock(Usuario.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(usuario0).getEmail();
      doReturn((String) null).when(usuario0).getSenha();
      doReturn((String) null).when(usuario0).toString();
      UsuarioService usuarioService0 = mock(UsuarioService.class, new ViolatedAssumptionAnswer());
      doReturn(usuario0).when(usuarioService0).updateToken(any(com.formento.cadastro.security.UsuarioAuthentication.class));
      Injector.inject(authenticationRestServiceProvider0, (Class<?>) AuthenticationRestServiceProvider.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(authenticationRestServiceProvider0, (Class<?>) AuthenticationRestServiceProvider.class);
      UsuarioAuthentication usuarioAuthentication0 = mock(UsuarioAuthentication.class, new ViolatedAssumptionAnswer());
      Usuario usuario1 = authenticationRestServiceProvider0.createAuthenticationToken(usuarioAuthentication0);
      authenticationRestServiceProvider0.createAuthentication(usuario1);
      assertNull(usuario1.getToken());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AuthenticationRestServiceProvider authenticationRestServiceProvider0 = new AuthenticationRestServiceProvider();
      AuthenticationManager authenticationManager0 = mock(AuthenticationManager.class, new ViolatedAssumptionAnswer());
      Injector.inject(authenticationRestServiceProvider0, (Class<?>) AuthenticationRestServiceProvider.class, "authenticationManager", (Object) authenticationManager0);
      CodificadorComponent codificadorComponent0 = mock(CodificadorComponent.class, new ViolatedAssumptionAnswer());
      Injector.inject(authenticationRestServiceProvider0, (Class<?>) AuthenticationRestServiceProvider.class, "codificadorComponent", (Object) codificadorComponent0);
      JwtTokenUtil jwtTokenUtil0 = mock(JwtTokenUtil.class, new ViolatedAssumptionAnswer());
      Injector.inject(authenticationRestServiceProvider0, (Class<?>) AuthenticationRestServiceProvider.class, "jwtTokenUtil", (Object) jwtTokenUtil0);
      UsuarioService usuarioService0 = mock(UsuarioService.class, new ViolatedAssumptionAnswer());
      doReturn((Usuario) null).when(usuarioService0).updateToken(any(com.formento.cadastro.security.UsuarioAuthentication.class));
      Injector.inject(authenticationRestServiceProvider0, (Class<?>) AuthenticationRestServiceProvider.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(authenticationRestServiceProvider0, (Class<?>) AuthenticationRestServiceProvider.class);
      UsuarioAuthentication usuarioAuthentication0 = mock(UsuarioAuthentication.class, new ViolatedAssumptionAnswer());
      Usuario usuario0 = authenticationRestServiceProvider0.createAuthenticationToken(usuarioAuthentication0);
      assertNull(usuario0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AuthenticationRestServiceProvider authenticationRestServiceProvider0 = new AuthenticationRestServiceProvider();
      AuthenticationManager authenticationManager0 = mock(AuthenticationManager.class, new ViolatedAssumptionAnswer());
      Injector.inject(authenticationRestServiceProvider0, (Class<?>) AuthenticationRestServiceProvider.class, "authenticationManager", (Object) authenticationManager0);
      CodificadorComponent codificadorComponent0 = mock(CodificadorComponent.class, new ViolatedAssumptionAnswer());
      Injector.inject(authenticationRestServiceProvider0, (Class<?>) AuthenticationRestServiceProvider.class, "codificadorComponent", (Object) codificadorComponent0);
      JwtTokenUtil jwtTokenUtil0 = mock(JwtTokenUtil.class, new ViolatedAssumptionAnswer());
      Injector.inject(authenticationRestServiceProvider0, (Class<?>) AuthenticationRestServiceProvider.class, "jwtTokenUtil", (Object) jwtTokenUtil0);
      UsuarioService usuarioService0 = mock(UsuarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(authenticationRestServiceProvider0, (Class<?>) AuthenticationRestServiceProvider.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(authenticationRestServiceProvider0, (Class<?>) AuthenticationRestServiceProvider.class);
      // Undeclared exception!
      try { 
        authenticationRestServiceProvider0.createAuthentication((UsuarioAuthentication) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.formento.cadastro.security.service.AuthenticationRestServiceProvider", e);
      }
  }
}
